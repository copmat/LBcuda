  module kernels_fluid
    use dimensions_m
    implicit none

    ! device arrays
    real(4), allocatable, device :: popsR_d(:,:,:,:,:), popsB_d(:,:,:,:,:)
    real(4), allocatable, device :: force_d(:, :,:,:)
    real(4), allocatable, device :: rhoR_d(:,:,:),rhoB_d(:,:,:)

    real(4), allocatable, device :: pos_d(:,:,:)
    real(4), allocatable, device :: forceAtoms_d(:,:,:)
    real(8), allocatable, device :: myf_d(:,:), myt_d(:,:)
    real(8), allocatable, device :: myf2_d(:,:), myt2_d(:,:)
    integer(2), allocatable, device :: listAtoms_d(:)
    integer(2), allocatable, device :: findAtoms_d(:,:,:,:)

    integer(1), allocatable, device :: issub_d(:, :, :)
    integer, device :: rmax_issub_d, sphereMax_d
    integer(1), allocatable, device :: myfluid_d(:,:,:, :)
    
    integer, device :: ndouble
    integer, device, allocatable :: exdouble(:), eydouble(:), ezdouble(:)

    integer, device :: stop_d, countmk_d, countrm_d, partVol_d, oldpartVol_d
    integer, device :: countn2p_d

    real, device :: minRho = -0.1, minPops = -0.1

    ! Debug
    real, allocatable, device :: debugline_d(:,:,:)
    real, device :: debugn2pf_d(2000,5)
    real, device :: debugn2pt_d(2000,5)
    integer(2), allocatable, device :: debugfluid_d(:,:,:)
  
  contains

    attributes(global) subroutine debug_issub
      integer :: i,j,k, id, val

      id = threadIdx%x

      do k = -rmax_issub_d,rmax_issub_d
        do j = -rmax_issub_d,rmax_issub_d
          do i = -rmax_issub_d,rmax_issub_d
            val = issub_d(i,j,k)
            write(*,*) 'CUDA-issub', i,j,k, val
          enddo
        enddo
      enddo

    end subroutine debug_issub

    attributes(device) pure function linear(i,j,k)
      integer, intent(in) :: i,j,k
      integer :: linear

      linear = i*1000**2 + j*1000 + k
    end function linear

    attributes(device) pure function linear2(i,j,k)
      integer, intent(in) :: i,j,k
      integer :: linear2

      linear2 = (50+i)*1000**2 + (50+j)*1000 + (50+k)
    end function linear2


  end module
