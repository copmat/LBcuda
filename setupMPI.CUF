
      subroutine setupMPI(nz)

      use dimensions_m
      use cudafor

      use mpi
      implicit none
      integer(4), intent(in) :: nz
      character*15 file_name5

      integer:: i, istat, ndev

!      call mpi_init(ierr)
!      call MPI_comm_size(MPI_COMM_WORLD, nprocs, ierr)
!      call MPI_comm_rank(MPI_COMM_WORLD, myrank, ierr)
!
! building virtual topology
!
      rreorder=.false.
!
      Tperiodic(1) = .true.
      Tperiodic(2) = .true.
      Tperiodic(3) = .true.
!
      prgrid(1) = 1
      prgrid(2) = 1
      prgrid(3) = nprocs
!
      call MPI_cart_create(MPI_COMM_WORLD, mpid, prgrid, &
                              Tperiodic,rreorder,lbecomm,ierr)

      call MPI_comm_rank(lbecomm, myrank, ierr)
      call MPI_cart_coords(lbecomm, myrank, mpid, &
                            mpicoords, ierr)
!
      offset(1) = mpicoords(1)*nx
      offset(2) = mpicoords(2)*ny
      offset(3) = mpicoords(3)*nz
!
      call mpi_barrier(lbecomm,ierr)
!
! mpidata type (to remove for performance)
! xy plane is contiguous arrays (stride.eq.1)
      call MPI_type_contiguous((ny+2)*(nx+2), MPI_REAL, xyplane, ierr)
      call MPI_type_commit(xyplane,ierr)
      if(myrank.eq.0) then
         write(6,*) 'MPI-DEBUG) INFO: xyplane (KB)-->', (ny+2)*(nx+2) *4 / 1024
      endif

      call MPI_type_contiguous((ny+2)*(nx+2), MPI_INTEGER1, xyplane_int1, ierr)
      call MPI_type_commit(xyplane_int1,ierr)
      if(myrank.eq.0) then
         write(6,*) 'MPI-DEBUG) INFO: xyplane_int1 (KB)-->', (ny+2)*(nx+2) / 1024
      endif
!
! x dir  & y dir
      call MPI_cart_shift(lbecomm, 0, 1, rear(2), front(2), ierr)
      call MPI_cart_shift(lbecomm, 1, 1, left(2), right(2), ierr)
      call MPI_cart_shift(lbecomm, 2, 1, down(2), up(2), ierr)

      call MPI_Comm_split_type(MPI_COMM_WORLD, MPI_COMM_TYPE_SHARED, 0, &
                               MPI_INFO_NULL, localcomm, ierr)
      call MPI_comm_size(localcomm, ndev, ierr)
      call MPI_Comm_rank(localcomm, mydev, ierr)
      mydev = 0; !istat = cudaSetDevice(mydev)

      write (6,*) 'MPI-DEBUG',myrank,'CPU offset = ', offset
      offset_d = offset
!
      write(6,*) 'MPI-DEBUG',myrank,':tot  tasks ', nprocs
      write(6,*) 'MPI-DEBUG',myrank,':Device     ', mydev, ndev
      write(6,*) 'MPI-DEBUG',myrank,':task mpi-z ', mpicoords(3)
      write(6,*) 'MPI-DEBUG',myrank,':up    task ', up(2)
      write(6,*) 'MPI-DEBUG',myrank,':down  task ', down(2)
      end subroutine setupMPI

      subroutine mystop
       use mpi
       implicit none
       integer:: ierr
        
#ifdef SERIAL
       stop
#else
       call mpi_abort(MPI_COMM_WORLD, 10, ierr)
#endif
      end subroutine mystop
